
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User documents
    match /users/{userId} {
      // Allow authenticated users to read specific fields (e.g., for profile lookups)
      // Adjust allowed fields as needed for your application's requirements.
      allow get: if request.auth != null;
      // Allow reading specific fields even for unauthenticated users (if needed, e.g., for public profiles)
      // Use caution here. Only allow fields that are truly public.
      // allow read: if resource.data.keys().hasAny(['name', 'imageUrl']);

      // Disallow listing all user documents
      allow list: if false;

      // Only the authenticated owner can create, update, or delete their root user document.
      allow write: if request.auth != null && request.auth.uid == userId;

      // Subcollections within a user document
      match /publicProfile/{docId} {
        // Allow owner full read/write access to their profile subdocument
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /releases/{releaseId} {
        // Allow owner full read/write access to their releases subcollection
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /events/{eventId} {
         // Allow owner full read/write access to their events subcollection
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Add rules for other subcollections as needed
      // match /privateData/{privateDocId} {
      //   allow read, write: if request.auth != null && request.auth.uid == userId;
      // }
    }

    // Deny all other access to the root level by default
    // match /{document=**} {
    //   allow read, write: if false;
    // }
    // It's often better to rely on the specific matches above and let anything
    // not explicitly matched be denied by default.
  }
}

service firebase.storage {
  match /b/{bucket}/o {

    // Allow users to read/write ONLY within their own dedicated folders.
    // Match any file within a user-specific folder (e.g., profileImages/{userId}/...)
    match /profileImages/{userId}/{allPaths=**} {
        // Allow read access to anyone (adjust if images should be private)
        allow read: if true;
        // Allow write (create, update, delete) only by the authenticated owner
        allow write: if request.auth != null && request.auth.uid == userId;
    }

     // Match files within the user's releaseArtwork folder
    match /releaseArtwork/{userId}/{allPaths=**} {
        // Allow read access to anyone (e.g., to display artwork publicly)
        allow read: if true;
        // Allow write only by the authenticated owner
        allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Match files within the user's releases (ZIP files) folder
    match /releases/{userId}/{allPaths=**} {
        // Disallow public read access to ZIP files by default
        allow read: if request.auth != null && request.auth.uid == userId;
        // Allow write only by the authenticated owner
        allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Deny all other storage access by default
    // match /{allPaths=**} {
    //   allow read, write: if false;
    // }
    // Relying on specific matches above implicitly denies other paths.
  }
}
    