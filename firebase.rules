rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {

      // Function to check if only allowed fields are being read
      function isSafeRead() {
        // Check if reading a document (not querying a collection)
        // Allow reading only these specific fields or if checking existence (request.resource == null)
        return request.resource == null
               || resource.data.keys().hasOnly(['email', 'uid', 'name', 'imageUrl']);
      }

      // Allow reading individual documents if authenticated and only reading safe fields
      // Note: Firestore applies 'get' rules to documents returned by 'list' queries.
      allow get: if request.auth != null && isSafeRead();

      // Allow querying the collection by 'email' if authenticated and limited to 1 result
      allow list: if request.auth != null
                   && request.query.limit <= 1
                   && request.query.filters.size() == 1
                   && request.query.filters[0].fieldPath == 'email'
                   && request.query.filters[0].op == '==';

      // Allow writing only by the owner
      allow write: if request.auth != null && request.auth.uid == userId;

      // Allow user full access to everything under their user subcollections
      match /publicProfile/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /releases/{releaseId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /events/{eventId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

     // Deny all other access by default
     match /{document=**} {
        allow read, write: if false;
     }
  }
}
