
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the root 'users' collection
    match /users/{userId} {
      // Allow a user to read their own document.
      // Disallow listing all users for security.
      // Allow a user to create, update, or delete their own document.
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow list: if false; // Explicitly disallow listing all users

      // Rules for the 'publicProfile' subcollection
      match /publicProfile/{profileDocId} {
        // Allow anyone to read public profiles (e.g., for display on a public site if needed)
        // If profiles should only be readable by the owner or other specific conditions, adjust here.
        allow get: if true; // Or: if request.auth != null; for logged-in users only
        allow list: if false; // Disallow listing all public profiles directly
        // Only the owner can create, update, or delete their public profile.
        allow write: if request.auth != null && request.auth.uid == userId;
      }

      // Rules for the 'releases' subcollection
      match /releases/{releaseId} {
        // Only the owner can read, create, update, or delete their releases.
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Rules for the 'events' subcollection
      match /events/{eventId} {
        // Only the owner can read, create, update, or delete their events.
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Default deny all other paths not explicitly matched above.
    // This is a good security practice.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Rules for release ZIP files
    // Path: releases/{userId}/{fileName}
    match /releases/{userId}/{allPaths=**} {
      // Allow read by authenticated users (e.g., if admin needs access, or if links are shared)
      // Adjust read access as needed (e.g., only owner: request.auth.uid == userId)
      allow read: if request.auth != null;
      // Only the authenticated owner can upload/delete their release files.
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for release artwork files
    // Path: releaseArtwork/{userId}/{fileName}
    match /releaseArtwork/{userId}/{allPaths=**} {
      // Allow public read for artwork URLs (common for display)
      allow get: if true;
      allow list: if false; // Prevent listing all artwork
      // Only the authenticated owner can upload/delete their release artwork.
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for profile images
    // Path: profileImages/{userId}/{fileName}
    match /profileImages/{userId}/{allPaths=**} {
        // Allow public read for profile images if they are displayed publicly
        allow get: if true;
        allow list: if false; // Prevent listing all profile images
        // Only the authenticated owner can upload/delete their profile image.
        allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Default deny all other storage paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
