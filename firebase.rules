
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow authenticated users to read specific fields of any user document
      // Added 'displayName' for broader compatibility, 'isLabel' for filtering in getManagedArtists.
      allow get: if request.auth != null && (request.resource == null || resource.data.keys().hasAny(['email', 'name', 'imageUrl', 'isLabel', 'displayName', 'uid']));
      
      // Allow authenticated users to LIST users - Needed for getManagedArtists
      // WARNING: This is broad. For production, use specific queries or a different data model.
      allow list: if request.auth != null; 

      // Only the user can write their own document
      allow update, delete, create: if request.auth != null && request.auth.uid == userId;
    }

    // Allow user full access to everything under their user subcollections (releases, events, publicProfile)
    match /users/{userId}/{subcollection}/{docId} {
      // For publicProfile, allow any authenticated user to read it.
      // For other subcollections (releases, events), only the owner can read/write.
      allow read: if request.auth != null && (subcollection == 'publicProfile' || request.auth.uid == userId);
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Releases collection (for storage file metadata, assuming direct writes here are not the primary flow)
    // This rule needs careful consideration based on how you handle release metadata.
    // If release metadata is ONLY stored under users/{userId}/releases, this top-level rule might be redundant or too permissive.
    match /releases/{releaseId} {
       // Allow users to manage their own releases (create, read, update, delete)
       allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
       // Allow create if the document about to be written has the correct userId
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
service firebase.storage {
  match /b/{bucket}/o {
    // Allow users to upload profile images to their own folder
    match /profileImages/{userId}/{allPaths=**} {
      allow read: if request.auth != null; // Or more restrictive if needed
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    // Allow users to upload release ZIP files to their own folder
    match /releases/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    // Allow users to upload release artwork to their own folder
    match /releaseArtwork/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
