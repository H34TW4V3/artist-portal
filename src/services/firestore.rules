
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow limited public read access to root user documents
    match /users/{userId} {
      // Allow reading only specific fields (email, uid, name, imageUrl) if needed
      // Adjust 'true' to 'request.auth != null' if only logged-in users should read these fields
      allow read: if request.auth != null && isSafeRead();

      function isSafeRead() {
        // Check if the request is trying to get the document (read)
        // And if the resource being accessed only contains allowed fields
        // This rule is complex and might be better handled by specific field checks if Firestore evolves to support it directly in 'allow get' easily.
        // A simpler, more common approach is to allow reading the whole doc if needed,
        // or restrict reads entirely and rely on subcollections.
        // For now, let's allow reading the doc if authenticated and trying to get it.
        // Direct field read rules are tricky without listing all allowed fields.
        // Let's simplify: Allow authenticated read of the root doc.
        return request.auth != null; // Simplification: Allow authenticated read
      }

      // Allow creating/updating only by the user themselves
      // For create: Ensure the written data has the correct userId.
      // For update: Ensure the user is updating their own document.
      allow write: if request.auth != null && request.auth.uid == userId;
      // Prevent listing all users
      allow list: if false;
    }

    // Public Profile Subcollection
    match /users/{userId}/publicProfile/{docId} {
      // Allow reading by anyone (adjust if needed, e.g., 'if request.auth != null')
      allow read: if true;
      // Allow writing only by the owner
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Releases Subcollection: Full access ONLY for the owner
    match /users/{userId}/releases/{releaseId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

     // Events Subcollection: Full access ONLY for the owner
     match /users/{userId}/events/{eventId} {
       allow read, write: if request.auth != null && request.auth.uid == userId;
     }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
